package com.haorenao.app.api;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.httpclient.Cookie;
import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.cookie.CookiePolicy;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.params.HttpMethodParams;

import com.haorenao.app.AppContext;
import com.haorenao.app.AppException;
import com.haorenao.app.bean.ActiveList;
import com.haorenao.app.bean.Barcode;
import com.haorenao.app.bean.Blog;
import com.haorenao.app.bean.BlogCommentList;
import com.haorenao.app.bean.BlogList;
import com.haorenao.app.bean.CommentList;
import com.haorenao.app.bean.FavoriteList;
import com.haorenao.app.bean.FriendList;
import com.haorenao.app.bean.MessageList;
import com.haorenao.app.bean.MyInformation;
import com.haorenao.app.bean.News;
import com.haorenao.app.bean.NewsList;
import com.haorenao.app.bean.Notice;
import com.haorenao.app.bean.Post;
import com.haorenao.app.bean.PostList;
import com.haorenao.app.bean.Report;
import com.haorenao.app.bean.Result;
import com.haorenao.app.bean.SearchList;
import com.haorenao.app.bean.Software;
import com.haorenao.app.bean.SoftwareCatalogList;
import com.haorenao.app.bean.SoftwareList;
import com.haorenao.app.bean.Tweet;
import com.haorenao.app.bean.TweetList;
import com.haorenao.app.bean.URLs;
import com.haorenao.app.bean.Update;
import com.haorenao.app.bean.User;
import com.haorenao.app.bean.UserInformation;
import com.haorenao.app.bean.WellcomeImage;
import com.haorenao.app.bean.th.ArticleList;
import com.haorenao.app.bean.th.BigPictureList;
import com.haorenao.app.bean.th.ItemCommentList;
import com.haorenao.app.bean.th.ItemList;
import com.haorenao.app.bean.th.PromotionList;
import com.haorenao.app.bean.th.Question;
import com.haorenao.app.bean.th.QuestionList;
import com.haorenao.app.bean.th.ShopList;
import com.haorenao.app.bean.th.THURLs;
import com.haorenao.app.bean.th.Threads;
import com.haorenao.app.bean.th.ThreadsList;
import com.haorenao.app.common.FileUtils;
import com.haorenao.app.common.ImageUtils;
import com.haorenao.app.common.StringUtils;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Log;

/**
 * 茶友之家
 * API客户端接口：用于访问网络数据
 */
public class THApiClient {

	public static final String UTF_8 = "UTF-8";
	public static final String DESC = "descend";
	public static final String ASC = "ascend";
	
	private final static int TIMEOUT_CONNECTION = 20000;
	private final static int TIMEOUT_SOCKET = 20000;
	private final static int RETRY_TIME = 3;

	private static String appCookie;
	private static String appUserAgent;

	public static void cleanCookie() {
		appCookie = "";
	}
	
	private static String getCookie(AppContext appContext) {
		if(appCookie == null || appCookie == "") {
			appCookie = appContext.getProperty("cookie");
		}
		return appCookie;
	}
	
	private static String getUserAgent(AppContext appContext) {
		if(appUserAgent == null || appUserAgent == "") {
			StringBuilder ua = new StringBuilder("haorenao.com");
			ua.append('/'+appContext.getPackageInfo().versionName+'_'+appContext.getPackageInfo().versionCode);//App版本
			ua.append("/Android");//手机系统平台
			ua.append("/"+android.os.Build.VERSION.RELEASE);//手机系统版本
			ua.append("/"+android.os.Build.MODEL); //手机型号
			ua.append("/"+appContext.getAppId());//客户端唯一标识
			appUserAgent = ua.toString();
		}
		return appUserAgent;
	}
	
	private static HttpClient getHttpClient() {        
        HttpClient httpClient = new HttpClient();
		// 设置 HttpClient 接收 Cookie,用与浏览器一样的策略
		httpClient.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
        // 设置 默认的超时重试处理策略
		httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler());
		// 设置 连接超时时间
		httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT_CONNECTION);
		// 设置 读数据超时时间 
		httpClient.getHttpConnectionManager().getParams().setSoTimeout(TIMEOUT_SOCKET);
		// 设置 字符集
		httpClient.getParams().setContentCharset(UTF_8);
		return httpClient;
	}	
	
	private static GetMethod getHttpGet(String url, String cookie, String userAgent) {
		GetMethod httpGet = new GetMethod(url);
		// 设置 请求超时时间
		httpGet.getParams().setSoTimeout(TIMEOUT_SOCKET);
		httpGet.setRequestHeader("Host", URLs.HOST);
		httpGet.setRequestHeader("Connection","Keep-Alive");
		httpGet.setRequestHeader("Cookie", cookie);
		httpGet.setRequestHeader("User-Agent", userAgent);
		return httpGet;
	}
	
	private static PostMethod getHttpPost(String url, String cookie, String userAgent) {
		PostMethod httpPost = new PostMethod(url);
		// 设置 请求超时时间
		httpPost.getParams().setSoTimeout(TIMEOUT_SOCKET);
		httpPost.setRequestHeader("Host", URLs.HOST);
		httpPost.setRequestHeader("Connection","Keep-Alive");
		httpPost.setRequestHeader("Cookie", cookie);
		httpPost.setRequestHeader("User-Agent", userAgent);
		return httpPost;
	}
	
	private static String _MakeURL(String p_url, Map<String, Object> params) {
		StringBuilder url = new StringBuilder(p_url);
		if(url.indexOf("?")<0)
			url.append('?');

		for(String name : params.keySet()){
			url.append('&');
			url.append(name);
			url.append('=');
			url.append(String.valueOf(params.get(name)));
			//不做URLEncoder处理
			//url.append(URLEncoder.encode(String.valueOf(params.get(name)), UTF_8));
		}

		return url.toString().replace("?&", "?");
	}
	
	/**
	 * get请求URL
	 * @param url
	 * @throws AppException 
	 */
	private static InputStream http_get(AppContext appContext, String url) throws AppException {	
		String cookie = getCookie(appContext);
		String userAgent = getUserAgent(appContext);
		
		HttpClient httpClient = null;
		GetMethod httpGet = null;

		String responseBody = "";
		int time = 0;
		do{
			try 
			{
				httpClient = getHttpClient();
				httpGet = getHttpGet(url, cookie, userAgent);			
				int statusCode = httpClient.executeMethod(httpGet);
				if (statusCode != HttpStatus.SC_OK) {
					throw AppException.http(statusCode);
				}
				responseBody = httpGet.getResponseBodyAsString();
				break;				
			} catch (HttpException e) {
				time++;
				if(time < RETRY_TIME) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {} 
					continue;
				}
				// 发生致命的异常，可能是协议不对或者返回的内容有问题
				e.printStackTrace();
				throw AppException.http(e);
			} catch (IOException e) {
				time++;
				if(time < RETRY_TIME) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {} 
					continue;
				}
				// 发生网络异常
				e.printStackTrace();
				throw AppException.network(e);
			} finally {
				// 释放连接
				httpGet.releaseConnection();
				httpClient = null;
			}
		}while(time < RETRY_TIME);
		
		//responseBody = responseBody.replaceAll("\\p{Cntrl}", "\r\n");
		if(responseBody.contains("result") && responseBody.contains("errorCode") && appContext.containsProperty("user.uid")){
			try {
				Result res = Result.parse(new ByteArrayInputStream(responseBody.getBytes()));	
				if(res.getErrorCode() == 0){
					appContext.Logout();
					appContext.getUnLoginHandler().sendEmptyMessage(1);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}			
		}
		return new ByteArrayInputStream(responseBody.getBytes());
	}
	
	/**
	 * 公用post方法
	 * @param url
	 * @param params
	 * @param files
	 * @throws AppException
	 */
	private static InputStream _post(AppContext appContext, String url, Map<String, Object> params, Map<String,File> files) throws AppException {
		//System.out.println("post_url==> "+url);
		String cookie = getCookie(appContext);
		String userAgent = getUserAgent(appContext);
		
		HttpClient httpClient = null;
		PostMethod httpPost = null;
		
		//post表单参数处理
		int length = (params == null ? 0 : params.size()) + (files == null ? 0 : files.size());
		Part[] parts = new Part[length];
		int i = 0;
        if(params != null)
        for(String name : params.keySet()){
        	parts[i++] = new StringPart(name, String.valueOf(params.get(name)), UTF_8);
        	//System.out.println("post_key==> "+name+"    value==>"+String.valueOf(params.get(name)));
        }
        if(files != null)
        for(String file : files.keySet()){
        	try {
				parts[i++] = new FilePart(file, files.get(file));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
        	//System.out.println("post_key_file==> "+file);
        }
		
		String responseBody = "";
		int time = 0;
		do{
			try 
			{
				httpClient = getHttpClient();
				httpPost = getHttpPost(url, cookie, userAgent);	        
		        httpPost.setRequestEntity(new MultipartRequestEntity(parts,httpPost.getParams()));		        
		        int statusCode = httpClient.executeMethod(httpPost);
		        if(statusCode != HttpStatus.SC_OK) 
		        {
		        	throw AppException.http(statusCode);
		        }
		        else if(statusCode == HttpStatus.SC_OK) 
		        {
		            Cookie[] cookies = httpClient.getState().getCookies();
		            String tmpcookies = "";
		            for (Cookie ck : cookies) {
		                tmpcookies += ck.toString()+";";
		            }
		            //保存cookie   
	        		if(appContext != null && tmpcookies != ""){
	        			appContext.setProperty("cookie", tmpcookies);
	        			appCookie = tmpcookies;
	        		}
		        }
		     	responseBody = httpPost.getResponseBodyAsString();
		        //System.out.println("XMLDATA=====>"+responseBody);
		     	break;	     	
			} catch (HttpException e) {
				time++;
				if(time < RETRY_TIME) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {} 
					continue;
				}
				// 发生致命的异常，可能是协议不对或者返回的内容有问题
				e.printStackTrace();
				throw AppException.http(e);
			} catch (IOException e) {
				time++;
				if(time < RETRY_TIME) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {} 
					continue;
				}
				// 发生网络异常
				e.printStackTrace();
				throw AppException.network(e);
			} finally {
				// 释放连接
				httpPost.releaseConnection();
				httpClient = null;
			}
		}while(time < RETRY_TIME);
        
        responseBody = responseBody.replaceAll("\\p{Cntrl}", "");
		if(responseBody.contains("result") && responseBody.contains("errorCode") && appContext.containsProperty("user.uid")){
			try {
				Result res = Result.parse(new ByteArrayInputStream(responseBody.getBytes()));	
				if(res.getErrorCode() == 0){
					appContext.Logout();
					appContext.getUnLoginHandler().sendEmptyMessage(1);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}			
		}
        return new ByteArrayInputStream(responseBody.getBytes());
	}
	
	/**
	 * post请求URL
	 * @param url
	 * @param params
	 * @param files
	 * @throws AppException 
	 * @throws IOException 
	 * @throws  
	 */
	private static Result http_post(AppContext appContext, String url, Map<String, Object> params, Map<String,File> files) throws AppException, IOException {
        return Result.parse(_post(appContext, url, params, files));  
	}	
	
	
	/**
	 * 获取首页新闻列表
	 * @param appContext
	 * @param pageIndex
	 * @param pageSize
	 * @return
	 * @throws AppException
	 */
	public static ArticleList getArticalList(AppContext appContext,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.ARTICLES_LIST, new HashMap<String, Object>(){{
			put("page", pageIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return ArticleList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取首页大图列表
	 * @param appContext
	 * @return
	 * @throws AppException
	 */
	public static BigPictureList getBigPictureList(AppContext appContext) throws AppException {
		String newUrl = _MakeURL(THURLs.ARTICLES_BIG_PIC, new HashMap<String, Object>(){{
			
		}});
		android.util.Log.d("url", newUrl);
		try {
			return BigPictureList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取论坛帖子列表
	 */
	public static ThreadsList getThreadsList(AppContext appContext,final int boardIndex,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.THREAD_LIST, new HashMap<String, Object>(){{
			put("page", pageIndex);
			put("board", boardIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return ThreadsList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取论坛帖子详情
	 */
	public static Threads getThreadsDetail(AppContext appContext, final int thread_id) throws AppException {
		String newUrl = _MakeURL(THURLs.THREAD_DETAIL, new HashMap<String, Object>(){{
			put("thread", thread_id);
		}});
		android.util.Log.d("url", newUrl);
		try{
			return Threads.parse(http_get(appContext, newUrl));			
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取问答详情
	 */
	public static Question getQuestionDetail(AppContext appContext, final int question_id) throws AppException {
		String newUrl = _MakeURL(THURLs.QUESTION_DETAIL, new HashMap<String, Object>(){{
			put("question", question_id);
		}});
		android.util.Log.d("url", newUrl);
		try{
			return Question.parse(http_get(appContext, newUrl));			
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取问答列表
	 */
	public static QuestionList getQuestionList(AppContext appContext,final int catalog,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.QUESTION_LIST, new HashMap<String, Object>(){{
			put("page", pageIndex);
			//put("category", boardIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return QuestionList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取促销商品列表
	 */
	public static PromotionList getPromotionList(AppContext appContext,final int catalog,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.SHOP_LIST_PROMOTIONS, new HashMap<String, Object>(){{
			//put("page", pageIndex);
			//put("category", boardIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return PromotionList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取商店列表
	 */
	public static ShopList getShopList(AppContext appContext,final int catalog,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.SHOP_LIST_ALL_SHOP, new HashMap<String, Object>(){{
			//put("page", pageIndex);
			//put("category", boardIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return ShopList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取所有商品列表
	 * 
	 */
	public static ItemList getItemList(AppContext appContext,final int catalog,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.SHOP_LIST_ALL_ITEM, new HashMap<String, Object>(){{
			put("page", pageIndex);
			//put("category", boardIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return ItemList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取所有商品评价列表
	 * 
	 */
	public static ItemCommentList getItemCommentList(AppContext appContext,final int catalog,final int pageIndex,final int pageSize) throws AppException {
		String newUrl = _MakeURL(THURLs.SHOP_ALL_ITEM_COMMENTS, new HashMap<String, Object>(){{
			put("page", pageIndex);
			//put("category", boardIndex);
		}});
		android.util.Log.d("url", newUrl);
		try {
			return ItemCommentList.parse(http_get(appContext, newUrl));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 获取网络图片
	 * @param url
	 * @return
	 */
	public static Bitmap getNetBitmap(String url) throws AppException {
		HttpClient httpClient = null;
		GetMethod httpGet = null;
		Bitmap bitmap = null;
		int time = 0;
		do{
			try 
			{
				httpClient = getHttpClient();
				httpGet = getHttpGet(url, null, null);
				int statusCode = httpClient.executeMethod(httpGet);
				if (statusCode != HttpStatus.SC_OK) {
					throw AppException.http(statusCode);
				}
		        InputStream inStream = httpGet.getResponseBodyAsStream();
		        bitmap = BitmapFactory.decodeStream(inStream);
		        inStream.close();
		        break;
			} catch (HttpException e) {
				time++;
				if(time < RETRY_TIME) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {} 
					continue;
				}
				// 发生致命的异常，可能是协议不对或者返回的内容有问题
				e.printStackTrace();
				throw AppException.http(e);
			} catch (IOException e) {
				time++;
				if(time < RETRY_TIME) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e1) {} 
					continue;
				}
				// 发生网络异常
				e.printStackTrace();
				throw AppException.network(e);
			} finally {
				// 释放连接
				httpGet.releaseConnection();
				httpClient = null;
			}
		}while(time < RETRY_TIME);
		return bitmap;
	}
	
	/**
	 * 检查版本更新
	 * @param url
	 * @return
	 */
	public static Update checkVersion(AppContext appContext) throws AppException {
		try{
			return Update.parse(http_get(appContext, URLs.UPDATE_VERSION));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 检查是否有可下载的欢迎界面图片
	 * @param appContext
	 * @return
	 * @throws AppException
	 */
	public static void checkBackGround(AppContext appContext) throws AppException {
		try{
			WellcomeImage update = WellcomeImage.parse(http_get(appContext, URLs.UPDATE_VERSION));
			String filePath = FileUtils.getAppCache(appContext, "welcomeback");
			// 如果没有图片的链接地址则返回
			if(StringUtils.isEmpty(update.getDownloadUrl())) {
				return;
			}
			if(update.isUpdate()) {
				String url = update.getDownloadUrl();
				String fileName = update.getStartDate().replace("-", "") + "-" + update.getEndDate().replace("-", "");
				List<File> files = FileUtils.listPathFiles(filePath);
				if (!files.isEmpty()) {
					if(files.get(0).getName().equalsIgnoreCase(fileName)) {
						return;
					}
				}
				Bitmap photo = getNetBitmap(url);
				ImageUtils.saveImageToSD(appContext,
						filePath + fileName + ".png", photo, 100);
			} else {
				FileUtils.clearFileWithPath(filePath);
			}
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 登录， 自动处理cookie
	 * @param url
	 * @param username
	 * @param pwd
	 * @return
	 * @throws AppException
	 */
	public static User login(AppContext appContext, String username, String pwd) throws AppException {
		Map<String,Object> params = new HashMap<String,Object>();
		params.put("username", username);
		params.put("pwd", pwd);
		params.put("keep_login", 1);
				
		String loginurl = URLs.LOGIN_VALIDATE_HTTP;
		if(appContext.isHttpsLogin()){
			loginurl = URLs.LOGIN_VALIDATE_HTTPS;
		}
		
		try{
			return User.parse(_post(appContext, loginurl, params, null));		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}

	
	/**
	 * 更新用户头像
	 * @param appContext
	 * @param uid 当前用户uid
	 * @param portrait 新上传的头像
	 * @return
	 * @throws AppException
	 */
	public static Result updatePortrait(AppContext appContext, int uid, File portrait) throws AppException {
		Map<String,Object> params = new HashMap<String,Object>();
		params.put("uid", uid);
		
		Map<String, File> files = new HashMap<String, File>();
		files.put("portrait", portrait);
				
		try{
			return http_post(appContext, URLs.PORTRAIT_UPDATE, params, files);		
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	
	/**
	 * 发送举报
	 * @param appContext
	 * @param report
	 * @return
	 * @throws AppException
	 */
	public static String report(AppContext appContext, Report report) throws AppException {
		Map<String,Object> params = new HashMap<String,Object>();
		params.put("obj_id", report.getReportId());
		params.put("url", report.getLinkAddress());
		params.put("obj_type", report.getReason());
		if (report.getOtherReason() != null) {
			params.put("memo", report.getOtherReason());
		} else {
			params.put("memo", "其他原因");
		}
		try{
			return StringUtils.toConvertString(_post(appContext, URLs.REPORT, params, null));
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	}
	
	/**
	 * 二维码扫描签到
	 * @param appContext
	 * @param barcode
	 * @return
	 * @throws AppException
	 */
	public static String signIn(AppContext appContext, Barcode barcode) throws AppException {
		try{
			return StringUtils.toConvertString(http_get(appContext, barcode.getUrl()));
		}catch(Exception e){
			if(e instanceof AppException)
				throw (AppException)e;
			throw AppException.network(e);
		}
	} 
}
